name: Build and Deploy

on:
  push:

permissions:
  contents: write

jobs:
  setup-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - name: Check Rust version
        run: rustc --version
      - name: Check Rust Up version
        run: rustup --version
      - name: Compile Rust to WASM
        run: rustup target add wasm32-unknown-unknown
      - name: use trunk action
        uses: jetli/trunk-action@v0.5.0
      - name: Verify Trunk Version
        run: trunk --version
      - name: build
        run: trunk build --release
      - uses: actions/upload-artifact@v4
        with:
          name: rustapp
          path: dist/

  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: '^(main)$'

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [get-version, setup-rust]
    strategy:
      matrix:
        os: [linux, windows, macos]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: rustapp
          path: dist/

      - name: Create zip file
        run: |
          zip -r rustapp-${{ matrix.os }}.zip dist/*
          
      - name: Create GitHub Release
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
          GH_TOKEN: "${{ github.token }}"
        run: |
          if [ "${{ needs.get-version.outputs.is-prereleas }}" == "true" ]
          then
            gh prerelease create --repo $REPO --target $COMMIT -F changelog.txt $VERSION rustapp-linux.zip rustapp-windows.zip rustapp-macos.zip
          else 
            gh release create --repo $REPO --target $COMMIT -F changelog.txt $VERSION rustapp-linux.zip rustapp-windows.zip rustapp-macos.zip
          fi
