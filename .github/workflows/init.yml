name: Build and Deploy

on:
  push:

permissions:
  contents: write

jobs:
  setup-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - name: Check Rust version
        run: rustc --version
      - name: Check Rust Up version
        run: rustup --version
      - name: Compile Rust to WASM
        run: rustup target add wasm32-unknown-unknown
      - name: use trunk action
        uses: jetli/trunk-action@v0.5.0
      - name: Verify Trunk Version
        run: trunk --version
      - name: build
        run: trunk build --release
      - uses: actions/upload-artifact@v4
        with:
          name: rustapp
          path: dist/

  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: '^(main)$'

  build-and-zip:
    name: Build and Zip for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [get-version, setup-rust]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: rustapp
          path: dist/
      - name: Create archive file for Linux & Mac
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            tar -czvf rustapp-linux.tar.gz -C dist .
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            powershell Compress-Archive -Path dist\* -DestinationPath rustapp-windows.zip -Force
          else
            zip -r rustapp-macos.zip dist/*
          fi

        shell: bash

      - name: Create archive file for Windows
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path dist\* -DestinationPath rustapp-windows.zip
        shell: pwsh
        continue-on-error: true 
      - name: Upload archive file
        uses: actions/upload-artifact@v4
        with:
          name: rustapp-${{ matrix.os }}
          path: |
            rustapp-linux.tar.gz
            rustapp-windows.zip
            rustapp-macos.zip

  release:
    name: Release for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [get-version, setup-rust, build-and-zip]
    steps:
      - name: Download zip
        uses: actions/download-artifact@v4.1.8
        with:
          name: rustapp-ubuntu-latest
          path: ./${{ matrix.os }}/
      - name: Print version
        run: |
          echo "Changelogs: ${{ needs.get-version.outputs.changelogs }}" > changelog.txt
      - name: Create GitHub Release
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
          GH_TOKEN: "${{ github.token }}"
        run: |
          if [ "${{ needs.get-version.outputs.is-prereleas }}" == "true" ]; then
            gh prerelease create --repo $REPO --target $COMMIT -F changelog.txt $VERSION rustapp-ubuntu-latest.zip rustapp-windows-latest.zip rustapp-macos-latest.zip
          else 
            gh release create --repo $REPO --target $COMMIT -F changelog.txt $VERSION rustapp-ubuntu-latest.zip rustapp-windows-latest.zip rustapp-macos-latest.zip
          fi





